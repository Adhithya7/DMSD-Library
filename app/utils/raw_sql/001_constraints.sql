CREATE OR REPLACE FUNCTION abort_insert()
RETURNS trigger LANGUAGE plpgsql as $$
BEGIN
RETURN null;
END $$;

CREATE OR REPLACE FUNCTION ins_reserve()
RETURNS trigger LANGUAGE plpgsql as $$
BEGIN
INSERT INTO RESERVATION DEFAULT VALUES;
RETURN null;
END $$;

CREATE OR REPLACE FUNCTION ins_borrow()
RETURNS trigger LANGUAGE plpgsql as $$
BEGIN
INSERT INTO BORROWING DEFAULT VALUES;
RETURN null;
END $$;

CREATE OR REPLACE FUNCTION del_reserve()
RETURNS trigger LANGUAGE plpgsql as $$
BEGIN
DELETE FROM RESERVATION
WHERE RES_NO in (SELECT RESERVATION_NO from RESERVES
JOIN I
ON I.DOCID = RESERVES.DOCID and I.COPYNO = RESERVES.COPYNO and I.BID = RESERVES.BID);
RETURN null;
END $$;

-- CREATE TRIGGER TOTAL_BOOKS_BORROWED
-- BEFORE INSERT ON RESERVES
-- FOR EACH ROW
-- WHEN (10 >= ALL(SELECT COUNT(*)
--                 FROM (SELECT BOR_NO as txn, RID FROM BORROWS WHERE RDTIME is null
--                       UNION ALL
--                       SELECT RESERVATION_NO as txn, RID from RESERVES) AS C
--                 GROUP BY RID))
-- EXECUTE PROCEDURE abort_insert();

CREATE TRIGGER RESERVATION
BEFORE INSERT ON RESERVES
FOR EACH STATEMENT
EXECUTE PROCEDURE ins_reserve();

CREATE TRIGGER BORROWS
BEFORE INSERT ON BORROWS
FOR EACH STATEMENT
EXECUTE PROCEDURE ins_borrow();

CREATE TRIGGER DEL_RESERVE
AFTER INSERT ON BORROWS
REFERENCING NEW TABLE AS I
FOR EACH STATEMENT
EXECUTE PROCEDURE del_reserve();
